<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>steve&#39;s blog</title>
  
  <subtitle>welcome!</subtitle>
  <link href="http://stevezjq.github.io/atom.xml" rel="self"/>
  
  <link href="http://stevezjq.github.io/"/>
  <updated>2024-03-27T08:55:24.261Z</updated>
  <id>http://stevezjq.github.io/</id>
  
  <author>
    <name>stevezjq</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python实现维吉尼亚密码</title>
    <link href="http://stevezjq.github.io/posts/adc85227.html"/>
    <id>http://stevezjq.github.io/posts/adc85227.html</id>
    <published>2024-03-27T08:07:10.000Z</published>
    <updated>2024-03-27T08:55:24.261Z</updated>
    
    <content type="html"><![CDATA[<p>points：<br><div class="note info flat"><p>1.ASCII码的转换</p></div><br><div class="note info flat"><p>2.对input函数的理解</p></div><br><div class="note info flat"><p>3.append函数的使用</p></div></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import getch</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;please input plaintext:&quot;</span>)</span><br><span class="line">    chars = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        <span class="built_in">str</span>.append(char)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_secret_key</span>(<span class="params">ints</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;please input secret key:&quot;</span>)</span><br><span class="line">    keys = <span class="built_in">input</span>()</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="built_in">int</span> = <span class="built_in">ord</span>(key) - <span class="number">97</span></span><br><span class="line">        ints.append(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encryption</span>(<span class="params"><span class="built_in">str</span>, ints, en_str</span>):</span><br><span class="line">    ints_length = <span class="built_in">len</span>(ints)</span><br><span class="line">    str_length = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    a = <span class="built_in">int</span>(str_length / ints_length)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, a):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ints_length):</span><br><span class="line">            <span class="comment"># if str[i * j] == &quot;&quot;:</span></span><br><span class="line">            <span class="comment">#     break</span></span><br><span class="line">            temp_ascii = <span class="built_in">ord</span>(<span class="built_in">str</span>[i + j*(ints_length)])</span><br><span class="line">            temp_int = (temp_ascii + ints[i] - <span class="number">97</span>)%<span class="number">26</span></span><br><span class="line">            temp_char = <span class="built_in">chr</span>(temp_int+<span class="number">65</span>)</span><br><span class="line">            en_str.append(temp_char)</span><br><span class="line">    b=str_length-ints_length*a</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,b):</span><br><span class="line">        temp_ascii = <span class="built_in">ord</span>(<span class="built_in">str</span>[ints_length*a+i])</span><br><span class="line">        temp_int = (temp_ascii + ints[i] - <span class="number">97</span>) % <span class="number">26</span></span><br><span class="line">        temp_char = <span class="built_in">chr</span>(temp_int + <span class="number">65</span>)</span><br><span class="line">        en_str.append(temp_char)</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> en_str:</span><br><span class="line">        <span class="built_in">print</span>(element, end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">str</span> = []</span><br><span class="line">    ints = []</span><br><span class="line">    en_str = []</span><br><span class="line">    get_str(<span class="built_in">str</span>)</span><br><span class="line">    get_secret_key(ints)</span><br><span class="line">    encryption(<span class="built_in">str</span>, ints, en_str)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;points：&lt;br&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;1.ASCII码的转换&lt;/p&gt;
&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;2.对input函数的理解&lt;/p&gt;
&lt;/div&gt;&lt;br&gt;&lt;div class</summary>
      
    
    
    
    <category term="编程" scheme="http://stevezjq.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="密码学" scheme="http://stevezjq.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>个人对AMD和NVIDIA显卡的浅谈和比较</title>
    <link href="http://stevezjq.github.io/posts/52e36df5.html"/>
    <id>http://stevezjq.github.io/posts/52e36df5.html</id>
    <published>2024-03-21T09:23:35.000Z</published>
    <updated>2024-03-29T05:09:44.884Z</updated>
    
    <content type="html"><![CDATA[<div class="note warning disabled"><p>写前叠甲：本人对显卡了解不是非常深刻，发表的观点仅个人看法，如有疑问或意见敬请讨论</p></div><ol><li>传统性能：<br>在上一代30系和6000系的对决中，双方卡皇3090ti和6950xt可以说是打的难分难解。其中，90ti以其强大的传统性能和24g显存在ai领域大展身手，6950xt以其便宜的价格称霸高端游戏显卡，至今仍是4000价位（二手）显卡的推荐。<br>而对于去年推出的40系和7000系，AMD在旗舰显卡上黯然失色。黄皮衣刀客一刀砍    出的4090领先上代旗舰接近2倍的性能，timespy跑分接近40000领先7900xtx一万    多，以至于在旗舰市场几乎所有的用户都选择了n卡。</li><li>规格参数：<br>n卡在旗舰用料确实很足，但在甜品卡和入门卡用料却非常吝啬。例如今年争议非常大的4060ti和4070ti，一个作为2k大众卡一个作为4k大众卡，60ti给到的规格却只有128bit的位宽和8g显存，以至于部分3a在2k全高画质下会出现爆显存和卡顿的情况。70ti给到的也只有192bit的位宽和12g显存。一个接近3000的显卡在2k下不能畅玩，我想这是大部分60ti用户所诟病的。反观同性能的7700xt（192bit12g）和7900xt（320bit20g），规格参数完胜。</li><li>价格优势：<br>a卡一直有着“性价比”的美称，这是因为当两家显卡性能相同时，a卡的价格一般会低10%左右。例如热卖的4060ti和6750gre，二者性能相同，6750gre却只有4060的价格。高端市场的7900xtx（7000左右）和4080super（接近9000）也是如此。</li><li>游戏支持：<br>众所周知，自2017年之后a、n两家推出了超分辨率缩放功能：fsr和dlss。至今（24年4月）fsr已更新至fsr3.0，dlss已更新至dlss3.5。近几年的游戏普遍优化差，重点点名看门狗系列和美末，需要dlss这种物理外挂才能保持高帧率。在steam显卡占用排行榜中，n卡的占比超过7成，这也使得许多游戏偏n优化，只有dlss没有fsr，而dlss只有rtx显卡能用，gtx和a卡是不能使用的。许多网游例如永劫无间这种也是偏n优化。再来说说两家的黑科技帧生成，dlss3已有上百款游戏支持，而fsr3支持的游戏屈指可数。虽然有dlss转fsr的第三方补丁，效果肯定远不如原生的dlss3。</li><li>AI领域：<br>不做过多赘述，n卡的卖点之一就是他们的cuda核心，兼容一众的生产力软件。</li><li>一些谣言和误区：<br>1) a卡掉驱动：在5000系之后，a卡掉驱动的例子鲜为人知。不仅仅a，n卡也会掉，    在供电不足、超频、硬件损坏的情况下会大大增加掉驱动的概率。6000、7000系已经    做到了同n一样的稳定。<br>2) n卡颜色偏灰，a卡鲜艳：在nVidia图形设置中将颜色输出模式改为0-255完全。Amd    则是自动将其设为完全<br>3) n卡游戏画面糊，a卡清晰：amd驱动中会自动将游戏打上80%的锐化，n卡可alt+f3    手动加上锐化和使明朗。<br>4) n卡显存占用比a卡低，是不是n卡偷画质了？：a、n两家显存压缩技术不同，n    卡技术更成熟。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note warning disabled&quot;&gt;&lt;p&gt;写前叠甲：本人对显卡了解不是非常深刻，发表的观点仅个人看法，如有疑问或意见敬请讨论&lt;/p&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;传统性能：&lt;br&gt;在上一代30系和6000系的对决中，双方卡皇3090ti和69</summary>
      
    
    
    
    <category term="硬件" scheme="http://stevezjq.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
    <category term="显卡" scheme="http://stevezjq.github.io/tags/%E6%98%BE%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现凯撒密码（入门）</title>
    <link href="http://stevezjq.github.io/posts/d32097ac.html"/>
    <id>http://stevezjq.github.io/posts/d32097ac.html</id>
    <published>2024-03-11T06:49:12.000Z</published>
    <updated>2024-03-27T08:32:46.665Z</updated>
    
    <content type="html"><![CDATA[<p>水一篇文章—-<br>很简单:)</p><p>关键点：<br><div class="note info flat"><p>1.fgets函数的使用</p></div><br><div class="note info flat"><p>2.ASCII码</p></div><br><div class="note info flat"><p>3.可使用malloc语句为字符数组进行动态内存分配</p></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input:\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">fgets(str, <span class="keyword">sizeof</span>(str), <span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">while</span> (str[i + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((str[i] &lt;= <span class="string">&#x27;c&#x27;</span> &amp;&amp; str[i] &gt;= <span class="string">&#x27;a&#x27;</span>) || (str[i] &lt;= <span class="string">&#x27;C&#x27;</span> &amp;&amp; str[i] &gt;= <span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">str[i] = str[i] + <span class="number">23</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ((str[i] &gt;= <span class="string">&#x27;d&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;z&#x27;</span>) || (str[i] &gt;= <span class="string">&#x27;D&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, str[i] - <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span> (str[i] == (<span class="type">char</span>)<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;水一篇文章—-&lt;br&gt;很简单:)&lt;/p&gt;
&lt;p&gt;关键点：&lt;br&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;1.fgets函数的使用&lt;/p&gt;
&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;2.ASCII码&lt;/p&gt;
&lt;/d</summary>
      
    
    
    
    <category term="编程" scheme="http://stevezjq.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="密码学" scheme="http://stevezjq.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>快速开始</title>
    <link href="http://stevezjq.github.io/posts/9daba997.html"/>
    <id>http://stevezjq.github.io/posts/9daba997.html</id>
    <published>2024-03-07T03:40:08.000Z</published>
    <updated>2024-03-29T05:16:44.625Z</updated>
    
    <content type="html"><![CDATA[<p>点击这里，选择你喜欢的话题&nbsp------------------------------------------------------------------------------------------------------------------></p><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://s21.ax1x.com/2024/03/07/pFsC3jJ.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">编程</div>  <p>开发中</p>  <a href='https://www.stevezjq.cn/categories/%E7%BC%96%E7%A8%8B/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://s21.ax1x.com/2024/03/07/pFs9z7t.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">硬件</div>  <p>如果你对电脑硬件及数码设备感兴趣，点击这里</p>  <a href='https://www.stevezjq.cn/categories/%E7%A1%AC%E4%BB%B6/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://s21.ax1x.com/2024/03/07/pFr6FQ1.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">游戏</div>  <p>如果你对游戏尤其是3A大作感兴趣，点击这里</p>  <a href='https://www.stevezjq.cn/game'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://s21.ax1x.com/2024/03/07/pFsCUN6.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">生活</div>  <p>闲聊的地方</p>  <a href='https://www.stevezjq.cn/categories/%E7%94%9F%E6%B4%BB/'></a>  </figcaption>  </figure>  </div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;点击这里，选择你喜欢的话题&amp;nbsp------------------------------------------------------------------------------------------------------------------&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="生活" scheme="http://stevezjq.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="快速开始" scheme="http://stevezjq.github.io/tags/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>写在前面</title>
    <link href="http://stevezjq.github.io/posts/ca8bfdf3.html"/>
    <id>http://stevezjq.github.io/posts/ca8bfdf3.html</id>
    <published>2024-03-04T08:33:43.000Z</published>
    <updated>2024-03-27T08:31:56.878Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;欢迎来到我的博客！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="生活" scheme="http://stevezjq.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="http://stevezjq.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
